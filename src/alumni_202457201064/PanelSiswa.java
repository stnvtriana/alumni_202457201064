/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package alumni_202457201064;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.nio.file.Files;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

        




/**
 *
 * @author siti novi triana
 */
public class PanelSiswa extends javax.swing.JPanel {
     
    /**
     * Creates new form PanelSiswa
     */
    public PanelSiswa() {
        initComponents();
        reset();
        load_tabel_siswa();
        combokelas();
        
         
    }
    void reset(){
        tNIS1.setText(null);
        tNamaSiswa1.setText(null);
        cbJenisKelamin1.setSelectedItem(null);
        tTempatLahir1.setText(null);
        tTanggal.setCalendar(null);
        tHp1.setText(null);
        cbKelas1.setSelectedItem(null);
        tAlamat1.setText(null);
        tFoto.setIcon(null);
        tFoto.setText(null);
        tFotoPath.setText(null);        
    }
    
    void combokelas(){
        try {
            String sql = "SELECT * FROM kelas";
            Connection conn = koneksi.konek();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            //mengambil data satu persatu dan menambahkannya ke combo box
            while (rs.next()) {
                cbKelas1.addItem(rs.getString("id_kelas"));
            }
        } catch (SQLException sQLException) {
        }
        cbKelas1.setSelectedItem(null);
    }
    
   void load_tabel_siswa(){
        //membuat objek model tabel baru
        DefaultTableModel model = new DefaultTableModel();
        //menambahkan kolom kedalam model tabel
        //kolom pertama untuk kode jurusan
        model.addColumn("NIS");
        //kolom kedua untuk nama jurusan
        model.addColumn("Nama Siswa");
        model.addColumn("L/P");
        model.addColumn("Tempat Lahir");
        model.addColumn("Tgl Lahir");
        model.addColumn("Kelas");
        model.addColumn("HP");
        model.addColumn("Alamat");
        
        
        //query SQL untuk mengambil semua data dari table jurusan
        String sql = "SELECT * FROM siswa";
        
            try {
                //membuka koneksi kedatabase
                Connection conn = koneksi.konek();

                //membuka statement untuk menjalankan array
                Statement st = conn.createStatement();

                //menjalankan query dan menyimpan hasilnya dalam ResultSet
                ResultSet rs = st.executeQuery(sql);

                //melakukan iterasi untuk setiap baris data hasil query
                while (rs.next()) {
                    //mengambil data kolom kode_jur
                    String nis = rs.getString("nis");

                    //mengambil data kolom nama_jurusan
                    String namaSiswa = rs.getString("nama_siswa");
                    
                    //mengambil data kolom nama_jurusan
                    String jenisKelamin = rs.getString("gender");
                    
                    //mengambil data kolom nama_jurusan
                    String tempatlahir = rs.getString("tempat_lahir");
                    
                    //mengambil data kolom nama_jurusan
                    String tglLahir = rs.getString("tgl_lahir");
                    String kelas = rs.getString("id_kelas");
                    String hp = rs.getString("no_hp");

                    //membuat array berisi data satu baris
                    Object[] baris = {nis, namaSiswa, jenisKelamin, tempatlahir, tglLahir, kelas, hp};

                    //menambahkan array baris kedalam model table
                    model.addRow(baris);

                }
            } catch (SQLException sQLException) {
            //menampilkan pesan error jika gagal mengambil data dari database
            JOptionPane.showMessageDialog(null, "Gagal Mengambil Data!");
                System.out.println(sQLException);
            }

            //menampilkan model yang sudah diisi kedalam tabel GUI
            TableSiswa1.setModel(model);
        }
         

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelIsi = new javax.swing.JPanel();
        tTempatLahir1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tNamaSiswa1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tHp1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cbKelas1 = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tAlamat1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        bTutup1 = new javax.swing.JButton();
        tFoto = new javax.swing.JLabel();
        tNIS1 = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        cbJenisKelamin1 = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableSiswa1 = new javax.swing.JTable();
        bUbah1 = new javax.swing.JButton();
        bTambah1 = new javax.swing.JButton();
        bHapus1 = new javax.swing.JButton();
        bReset1 = new javax.swing.JButton();
        tTanggal = new com.toedter.calendar.JDateChooser();
        tFotoPath = new javax.swing.JLabel();

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel10.setText("Tempat Lahir");

        tNamaSiswa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tNamaSiswa1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel11.setText("Tanggal Lahir");

        jLabel12.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel12.setText("HP");

        jLabel13.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel13.setText("Kelas");

        jLabel14.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel14.setText("Alamat");

        jLabel15.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel15.setText("NIS");

        tAlamat1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tAlamat1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tAlamat1ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(153, 255, 153));

        jLabel16.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Data Siswa");

        bTutup1.setBackground(new java.awt.Color(102, 255, 102));
        bTutup1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alumni_202457201064/gambar/icons8-close-20.png"))); // NOI18N
        bTutup1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTutup1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 333, Short.MAX_VALUE)
                .addComponent(bTutup1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(bTutup1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tFoto.setText("Foto");
        tFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tFoto.setMaximumSize(new java.awt.Dimension(120, 150));
        tFoto.setMinimumSize(new java.awt.Dimension(100, 100));
        tFoto.setPreferredSize(new java.awt.Dimension(120, 150));
        tFoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tFotoMouseClicked(evt);
            }
        });

        cbJenisKelamin1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Laki Laki", "Perempuan" }));

        jLabel17.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel17.setText("Nama");

        jLabel18.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel18.setText("Jenis Kelamin");

        TableSiswa1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableSiswa1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableSiswa1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableSiswa1);

        bUbah1.setBackground(new java.awt.Color(255, 153, 51));
        bUbah1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        bUbah1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alumni_202457201064/gambar/icons8-note-20.png"))); // NOI18N
        bUbah1.setText("Ubah");
        bUbah1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        bUbah1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUbah1ActionPerformed(evt);
            }
        });

        bTambah1.setBackground(new java.awt.Color(0, 204, 51));
        bTambah1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        bTambah1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alumni_202457201064/gambar/icons8-plus-20.png"))); // NOI18N
        bTambah1.setText("Tambah");
        bTambah1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        bTambah1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTambah1ActionPerformed(evt);
            }
        });

        bHapus1.setBackground(new java.awt.Color(255, 51, 51));
        bHapus1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        bHapus1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alumni_202457201064/gambar/icons8-delete-20.png"))); // NOI18N
        bHapus1.setText("Hapus");
        bHapus1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        bHapus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHapus1ActionPerformed(evt);
            }
        });

        bReset1.setBackground(new java.awt.Color(0, 102, 255));
        bReset1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        bReset1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alumni_202457201064/gambar/icons8-reset-20 (1).png"))); // NOI18N
        bReset1.setText("Reset");
        bReset1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        bReset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bReset1ActionPerformed(evt);
            }
        });

        tFotoPath.setForeground(new java.awt.Color(255, 255, 255));
        tFotoPath.setText("jLabel1");

        javax.swing.GroupLayout PanelIsiLayout = new javax.swing.GroupLayout(PanelIsi);
        PanelIsi.setLayout(PanelIsiLayout);
        PanelIsiLayout.setHorizontalGroup(
            PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelIsiLayout.createSequentialGroup()
                .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelIsiLayout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(bTambah1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(bUbah1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(bHapus1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(bReset1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelIsiLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelIsiLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelIsiLayout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tTempatLahir1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(tNamaSiswa1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(jLabel18)
                            .addComponent(cbJenisKelamin1, 0, 172, Short.MAX_VALUE)
                            .addComponent(tTanggal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(PanelIsiLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tFotoPath, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelIsiLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelIsiLayout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addComponent(tFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(83, 83, 83)
                            .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tNIS1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15)
                                .addComponent(jLabel17))
                            .addGap(118, 118, 118)
                            .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel12)
                                .addComponent(tHp1)
                                .addComponent(jLabel13)
                                .addComponent(cbKelas1, 0, 215, Short.MAX_VALUE)
                                .addComponent(jLabel14)
                                .addComponent(tAlamat1)))
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1455, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        PanelIsiLayout.setVerticalGroup(
            PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelIsiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(tNamaSiswa1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbJenisKelamin1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tTempatLahir1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bReset1)
                    .addComponent(bHapus1)
                    .addComponent(bUbah1)
                    .addComponent(bTambah1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addComponent(tFotoPath)
                .addGap(105, 105, 105))
            .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelIsiLayout.createSequentialGroup()
                    .addGap(72, 72, 72)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelIsiLayout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(tFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PanelIsiLayout.createSequentialGroup()
                            .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel15)
                                .addComponent(jLabel12))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tNIS1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tHp1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(PanelIsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel17)
                                .addComponent(jLabel13))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbKelas1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tAlamat1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(560, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelIsi, javax.swing.GroupLayout.PREFERRED_SIZE, 1397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 139, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(PanelIsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(687, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tNamaSiswa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tNamaSiswa1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tNamaSiswa1ActionPerformed

    private void tAlamat1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tAlamat1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tAlamat1ActionPerformed

    private void bUbah1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUbah1ActionPerformed
                // TODO add your handling code here:
         // Mengambil NIS dari field input
        String nis = tNIS1.getText();

        // Mengambil Nama Siswa dari field input
        String namaSiswa = tNamaSiswa1.getText();

        // Mengambil nilai dari combo box jenis kelamin dan mengubah menjadi String
        String jenisKelamin = cbJenisKelamin1.getSelectedItem().toString();

        // Variabel untuk menyimpan kode jenis kelamin ('L' atau 'P')
        String jK = null;

        // Mengambil Tempat Lahir dari field input
        String tempatLahir = tTempatLahir1.getText();

        // Mengambil tanggal lahir dari komponen kalender
        Date tglLahirDate = tTanggal.getDate();

        // Mengubah tanggal lahir menjadi format "yyyy-MM-dd"
        String tglLahir = new SimpleDateFormat("yyyy-MM-dd").format(tglLahirDate);

        // Mengambil Nomor HP dari field input
        String hp = tHp1.getText();

        // Mengambil Kelas dari combo box
        String kelas = cbKelas1.getSelectedItem().toString();

        // Mengambil Alamat dari field input
        String alamat = tAlamat1.getText();

        // Mengambil path file foto dari field input tersembunyi
        String filePath = tFotoPath.getText();

        // Mengonversi pilihan jenis kelamin ke kode (L/P)
        switch (jenisKelamin) {
            case "Laki - laki":
                jK = "L";
                break;
            case "Perempuan":
                jK = "P";
                break;
            default:
                jK = null;
                break;
        }

        // Variabel untuk menyimpan path foto asli yang tersimpan di database
        String fotoAsli = null;

        try {
            // Query untuk mengambil path foto berdasarkan NIS
            String sql = "SELECT foto FROM siswa WHERE nis = ?";
            Connection conn = koneksi.konek();
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, nis);
            ResultSet rs = ps.executeQuery();

            // Jika data ditemukan, simpan path foto ke variabel fotoAsli
            if (rs.next()) {
                fotoAsli = rs.getString("foto");
            }
        } catch (SQLException e) {
            // Tampilkan pesan jika gagal mengambil foto dari database
            JOptionPane.showMessageDialog(null, "Gagal mengambil foto asli: " + e.getMessage());
            System.out.println(e);
        }

        // Menentukan apakah foto diubah oleh pengguna
        boolean fotoDiubah = (fotoAsli == null && !filePath.isEmpty())
                || (fotoAsli != null && !fotoAsli.equals(filePath));

        // Jika foto diubah, variabel 'foto' akan diisi dengan path baru
        String foto = fotoAsli;

        if (fotoDiubah) {
            try {
                // Ambil file dari path baru
                File sourceFile = new File(filePath);

                // Dapatkan ekstensi file
                String extension = filePath.substring(filePath.lastIndexOf('.') + 1);

                // Buat nama file baru berdasarkan waktu agar unik
                String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
                String destinationPath = "src/foto/foto-" + timestamp + "." + extension;

                // Salin file ke folder tujuan
                File destFile = new File(destinationPath);
                Files.copy(sourceFile.toPath(), destFile.toPath());

                // Simpan path tujuan ke variabel 'foto'
                foto = destinationPath;

            } catch (Exception e) {
                // Tampilkan pesan jika gagal upload file
                JOptionPane.showMessageDialog(null, "Gagal upload file: " + e.getMessage());
            }
        }

        try {
            // Query SQL berbeda tergantung apakah foto diubah atau tidak
            String sql2;
            if (fotoDiubah) {
                sql2 = "UPDATE siswa SET nama_siswa=?, gender=?, tempat_lahir=?, "
                        + "tgl_lahir=?, alamat=?, no_hp=?, id_kelas=?, foto=? WHERE nis=?";
            } else {
                sql2 = "UPDATE siswa SET nama_siswa=?, gender=?, tempat_lahir=?, "
                        + "tgl_lahir=?, alamat=?, no_hp=?, id_kelas=? WHERE nis=?";
            }

            // Membuka koneksi ke database
            Connection conn = koneksi.konek();

            // Menyiapkan statement untuk eksekusi SQL
            PreparedStatement statement = conn.prepareStatement(sql2);

            // Menetapkan parameter umum
            statement.setString(1, namaSiswa);
            statement.setString(2, jK);
            statement.setString(3, tempatLahir);
            statement.setString(4, tglLahir);
            statement.setString(5, alamat);
            statement.setString(6, hp);
            statement.setString(7, kelas);

            // Jika foto diubah, tetapkan parameter tambahan
            if (fotoDiubah) {
                statement.setString(8, foto);
                statement.setString(9, nis);
            } else {
                statement.setString(8, nis);
            }

            // Eksekusi perintah update
            statement.execute();

            // Tampilkan pesan sukses
            JOptionPane.showMessageDialog(null, "Data berhasil diubah!");

        } catch (SQLException e) {
            // Tampilkan pesan jika update gagal
            JOptionPane.showMessageDialog(null, "Gagal memperbarui data: " + e.getMessage());
        }

        // Muat ulang tabel agar perubahan terlihat
        load_tabel_siswa();

        // Kosongkan form setelah proses selesai
        reset();

    }//GEN-LAST:event_bUbah1ActionPerformed

    private void bTambah1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTambah1ActionPerformed
        // TODO add your handling code here:
            // Mengambil teks dari field NIS
        String nis = tNIS1.getText();

        // Mengambil teks dari field Nama Siswa
        String namaSiswa = tNamaSiswa1.getText();

        // Mengambil item yang dipilih dari combo box jenis kelamin dan mengubahnya menjadi string
        String jenisKelamin = cbJenisKelamin1.getSelectedItem().toString();

        // Variabel untuk menyimpan hasil konversi jenis kelamin (L/P)
        String jK = null;

        // Mengambil teks dari field Tempat Lahir
        String tempatLahir = tTempatLahir1.getText();

        // Mengambil tanggal dari komponen kalender
        Date tglLahirDate = tTanggal.getDate();

        // Mengubah tanggal lahir menjadi format "yyyy-MM-dd"
        String tglLahir = new SimpleDateFormat("yyyy-MM-dd").format(tglLahirDate);

        // Mengambil teks dari field nomor HP
        String hp = tHp1.getText();

        // Mengambil item yang dipilih dari combo box kelas
        String kelas = cbKelas1.getSelectedItem().toString();

        // Mengambil teks dari field alamat
        String alamat = tAlamat1.getText();

        // Mengambil path file dari label path foto
        String filePath = tFotoPath.getText();

        // Konversi jenis kelamin dari teks menjadi kode (L atau P)
        switch (jenisKelamin) {
            case "Laki - laki":
                jK = "L";
                break;
            case "Perempuan":
                jK = "P";
                break;
            default:
                jK = null;
                break;
        }

        // Variabel untuk menyimpan path file foto tujuan
        String foto = null;

        // Mengecek apakah ada path file foto yang dipilih
        if (filePath.length() != 0) {
            try {
                // Menyimpan path sumber file
                String sourcePath = filePath;
                File sourceFile = new File(sourcePath);

                // Menentukan folder tujuan untuk menyimpan foto
                String destinationFolderPath = "src/foto/";
                File destinationFolder = new File(destinationFolderPath);

                // Jika folder tujuan belum ada, buat folder tersebut
                if (!destinationFolder.exists()) {
                    destinationFolder.mkdir();
                }

                // Mengambil ekstensi file (contoh: jpg, png, dll)
                String extension = sourcePath.substring(sourcePath.lastIndexOf('.') + 1);

                // Membuat nama file baru yang unik berdasarkan timestamp
                String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
                String destinationFileName = "foto-" + timestamp + "." + extension;

                // Membuat file tujuan dengan path dan nama file baru
                File destinationFile = new File(destinationFolderPath + destinationFileName);

                // Menyalin file dari sumber ke tujuan
                Files.copy(sourceFile.toPath(), destinationFile.toPath());

                // Menyimpan path foto yang telah dipindahkan
                foto = destinationFile.getPath();

            } catch (Exception e) {
                // Menampilkan pesan error jika gagal mengupload file
                JOptionPane.showMessageDialog(null, "Gagal upload file: " + e.getMessage());
            }
        } else {
            // Jika tidak ada file yang dipilih, set null
            foto = null;
        }

        try {
            // Query SQL untuk menyimpan data siswa ke database
            String sql = "INSERT INTO siswa(nis,nama_siswa,gender,tempat_lahir,tgl_lahir,alamat,no_hp,id_kelas,foto)"
                    + " VALUES(?,?,?,?,?,?,?,?,?)";

            // Membuka koneksi ke database
            Connection conn = koneksi.konek();

            // Menyiapkan statement SQL dengan parameter
            PreparedStatement statement = conn.prepareStatement(sql);

            // Mengisi nilai parameter satu per satu
            statement.setString(1, nis);
            statement.setString(2, namaSiswa);
            statement.setString(3, jK);
            statement.setString(4, tempatLahir);
            statement.setString(5, tglLahir);
            statement.setString(6, alamat);
            statement.setString(7, hp);
            statement.setString(8, kelas);
            statement.setString(9, foto);

            // Menjalankan query penyimpanan
            statement.execute();

            // Menampilkan pesan bahwa data berhasil disimpan
            JOptionPane.showMessageDialog(null, "Data berhasil disimpan!");
        } catch (SQLException e) {
            // Menampilkan pesan jika terjadi kesalahan saat menyimpan data
            JOptionPane.showMessageDialog(null, "Data gagal disimpan!");
            System.out.println(e);
        }

        // Memuat ulang data siswa ke tabel
        load_tabel_siswa();

        // Mengosongkan semua input form setelah data disimpan
        reset();
           
    }//GEN-LAST:event_bTambah1ActionPerformed

    private void bHapus1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHapus1ActionPerformed
        // TODO add your handling code here:
        String  nis = tNIS1.getText();
            //query SQL untuk mengubah data pada table 
            String sql = "DELETE FROM siswa WHERE nis=?";
            
            try {
            //query SQL untuk menyisipkan data ketable jurusan
            Connection conn = koneksi.konek();

            //siapkan query SQL untuk dieksekusi dengan parameter
            PreparedStatement ps = conn.prepareStatement(sql);

            //isi  parameter pertama (?) dengan kode Jurusan
            ps.setString(1, nis);
            
            //jalankan query untuk menyimpan data ke databse
            ps.execute();
            //tampilkan pesan bahwa data berhasil disimpan
            JOptionPane.showMessageDialog(null, "Data Berhasil Dihapus!");
            
        } catch (SQLException e) {
        //jika terjadi kesalahan saat menyimpan data, tampilkan pesan gagal
        JOptionPane.showMessageDialog(null, "Gagal Menghapus Data"+ e.getMessage());
                System.out.println(e);
        }
            //panggil method untuk memuat ulang data pada table jurusan
           load_tabel_siswa();
           //panggil method untuk mereset atau mengosongkan inputan
           reset();
    }//GEN-LAST:event_bHapus1ActionPerformed

    private void bReset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bReset1ActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_bReset1ActionPerformed

    private void bTutup1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTutup1ActionPerformed
        // TODO add your handling code here:
        PanelIsi.setVisible(false);
    }//GEN-LAST:event_bTutup1ActionPerformed

    private void TableSiswa1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableSiswa1MouseClicked
        // TODO add your handling code here:
        // Mengambil indeks baris yang diklik pada tabel siswa
            int baris = TableSiswa1.rowAtPoint(evt.getPoint());

            // Mengambil nilai dari kolom pertama (NIS) pada baris yang diklik dan mengubah ke String
            String nis = TableSiswa1.getValueAt(baris, 0).toString();

            // Mengambil nilai dari kolom kedua (Nama Siswa)
            String namaSiswa = TableSiswa1.getValueAt(baris, 1).toString();

            // Mengambil objek dari kolom ketiga (Jenis Kelamin)
            Object jkObj = TableSiswa1.getValueAt(baris, 2);

            // Mengambil objek dari kolom keempat (Tempat Lahir)
            Object tempatObj = TableSiswa1.getValueAt(baris, 3);

            // Mengambil objek dari kolom kelima (Tanggal Lahir)
            Object tglObj = TableSiswa1.getValueAt(baris, 4);

            // Mengambil objek dari kolom keenam (Kelas)
            Object kelasObj = TableSiswa1.getValueAt(baris, 5);

            // Mengambil objek dari kolom ketujuh (Nomor HP)
            Object hpObj = TableSiswa1.getValueAt(baris, 6);

            // Menampilkan nilai NIS pada field input dan membuatnya tidak bisa diubah
            tNIS1.setText(nis);
            tNIS1.setEditable(false);

            // Menampilkan nama siswa ke field input
            tNamaSiswa1.setText(namaSiswa);

            // Mengonversi objek menjadi string, jika null maka hasilnya null atau string kosong
            String jenisKelamin = (jkObj != null) ? jkObj.toString() : null;
            String tempatLahir = (tempatObj != null) ? tempatObj.toString() : "";
            String tglLahir = (tglObj != null) ? tglObj.toString() : null;
            String idKelas = (kelasObj != null) ? kelasObj.toString() : null;
            String noHP = (hpObj != null) ? hpObj.toString() : "";

            // Menampilkan tempat lahir, no HP, dan memilih kelas sesuai data
            tTempatLahir1.setText(tempatLahir);
            tHp1.setText(noHP);
            cbKelas1.setSelectedItem(idKelas);

            // Jika tanggal lahir tidak null dan tidak kosong, ubah ke format Date dan tampilkan di komponen kalender
            if (tglLahir != null && !tglLahir.isEmpty()) {
                try {
                    tTanggal.setDate(java.sql.Date.valueOf(tglLahir));
                } catch (IllegalArgumentException e) {
                    // Jika gagal parsing tanggal, kosongkan field tanggal
                    tTanggal.setDate(null);
                }
            } else {
                tTanggal.setDate(null);
            }

            // Konversi kode jenis kelamin ke bentuk tampilan yang dipahami pengguna
            switch (jenisKelamin) {
                case "L":
                    cbJenisKelamin1.setSelectedItem("Laki - laki");
                    break;
                case "P":
                    cbJenisKelamin1.setSelectedItem("Perempuan");
                    break;
                default:
                    cbJenisKelamin1.setSelectedItem(null);
                    break;
            }

            try {
                // Query untuk mengambil data alamat dan foto berdasarkan NIS
                String sql = "SELECT alamat, foto FROM siswa WHERE nis = ?";

                // Membuka koneksi ke database
                Connection conn = koneksi.konek();

                // Menyiapkan statement SQL dengan parameter
                PreparedStatement ps = conn.prepareStatement(sql);

                // Mengisi parameter dengan NIS
                ps.setString(1, nis);

                // Menjalankan query dan menyimpan hasilnya
                ResultSet rs = ps.executeQuery();

                // Jika data ditemukan
                if (rs.next()) {
                    // Mengambil alamat dan foto dari hasil query
                    String alamat = rs.getString("alamat");
                    String foto = rs.getString("foto");

                    // Menampilkan alamat ke field input
                    tAlamat1.setText(alamat);

                    // Jika path foto tidak kosong, tampilkan gambar ke label foto
                    if (foto != null && !foto.isEmpty()) {
                        ImageIcon icon = new ImageIcon(foto);
                        Image image = icon.getImage().getScaledInstance(tFoto.getWidth(), tFoto.getHeight(), Image.SCALE_SMOOTH);
                        tFotoPath.setText(foto);
                        tFoto.setText(null);
                        tFoto.setIcon(new ImageIcon(image));
                    } else {
                        // Jika tidak ada foto, set teks "Foto" dan hapus icon
                        tFoto.setText("Foto");
                        tFoto.setIcon(null);
                    }
                }
            } catch (SQLException e) {
                // Menampilkan error ke konsol jika terjadi kesalahan SQL
                System.err.println(e.getMessage());
            }
    }//GEN-LAST:event_TableSiswa1MouseClicked

    private void tFotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tFotoMouseClicked
        // TODO add your handling code here:
        //membuat objek jFileChooser untuk membuka dialog pilihan file
        try {
            JFileChooser chooser = new JFileChooser();
            //menampilkan dialog dan menyimpan hasil aksi pengguna (OK atau Cancel)
            int result = chooser.showOpenDialog(null);
            //mengecek apakah pengguna menekan tommbol "open" (OK)
            if (result == JFileChooser.APPROVE_OPTION) {
                //mengambil file  yang dipilih oleh pengguna
                File file = chooser.getSelectedFile();
                //mengecek apakah file yang dipilih tidak null
                if (file != null) {
                    //membuat objek imageicon dari file gambar yang dipilih
                    ImageIcon icon = new ImageIcon(file.toString());
                    //mengubah ukuran gambar agar sesuai dengan label tFoto
                    Image image = icon.getImage().getScaledInstance(
                            tFoto.getWidth(),
                            tFoto.getHeight(),
                            Image.SCALE_SMOOTH
                    );

                    //membuat imageicon baru  dari gambar sesuai dengan label diubah ukurannya
                    ImageIcon ic = new ImageIcon(image);
                    //menghapus teks pada label foto
                    tFoto.setText(null);
                    //menampilkan gambar (icon) kedalam label tFoto
                    tFoto.setIcon(ic);
                    //mengambil path absolut dari file gambar dan menyimpan kefield tFotoPath
                    String filename = file.getAbsolutePath();
                    tFotoPath.setText(filename);
                }
                
            }else{
                //jika pengguna menekan tombol Cancel, tampilkan pesan ke konsol
                System.out.println("Pemilihan File Dibatalkan Oleh Pengguna.");
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error Upload" + e.getMessage());
            System.out.println(e);
        }
        
    }//GEN-LAST:event_tFotoMouseClicked
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelIsi;
    private javax.swing.JTable TableSiswa1;
    private javax.swing.JButton bHapus1;
    private javax.swing.JButton bReset1;
    private javax.swing.JButton bTambah1;
    private javax.swing.JButton bTutup1;
    private javax.swing.JButton bUbah1;
    private javax.swing.JComboBox<String> cbJenisKelamin1;
    private javax.swing.JComboBox<String> cbKelas1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField tAlamat1;
    private javax.swing.JLabel tFoto;
    private javax.swing.JLabel tFotoPath;
    private javax.swing.JTextField tHp1;
    private javax.swing.JTextField tNIS1;
    private javax.swing.JTextField tNamaSiswa1;
    private com.toedter.calendar.JDateChooser tTanggal;
    private javax.swing.JTextField tTempatLahir1;
    // End of variables declaration//GEN-END:variables
}


